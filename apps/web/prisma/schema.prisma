generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  COFFEE_PRODUCER
  COFFEE_BUYER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model ShoppingCart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  items     ShoppingCartItem[]
  user      User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
}

model Product {
  id           Int      @id @default(autoincrement())
  tokenId      Int
  name         String
  price        Float
  nftMetadata  Json
  hidden       Boolean? @default(false)
  stock        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shoppingCartItems ShoppingCartItem[]
  orderItems        OrderItem[]
  favorites         Favorite[]

  @@index([name])
}

model ShoppingCartItem {
  id             String       @id @default(cuid())
  quantity       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId String
  product        Product      @relation(fields: [productId], references: [id])
  productId      Int

  @@index([shoppingCartId])
  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  sellerId  String
  total     Float
  status    OrderStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  user      User        @relation("UserOrders", fields: [userId], references: [id])
  seller    User        @relation("SellerOrders", fields: [sellerId], references: [id])

  @@index([userId])
  @@index([sellerId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId Int
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  walletAddress String         @unique
  physicalAddress String?
  phone             String?
  name              String?
  email             String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  shoppingCarts ShoppingCart[]
  buyerOrders   Order[]        @relation("UserOrders")    // Orders made by this user as a buyer
  sellerOrders  Order[]        @relation("SellerOrders")  // Orders where this user is the seller
  accounts      Account[]
  sessions      Session[]
  farms          Farm[]
  password      String?
  favorites     Favorite[]
}

model Farm {
  id        Int      @id @default(autoincrement())
  name      String
  region    String
  altitude  Int
  coordinates String
  website   String
  farmImage String
  email     String
  userId    String
  user      User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}